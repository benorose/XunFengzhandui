
ps2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000242c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002538  08002538  00003538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800256c  0800256c  00004090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800256c  0800256c  00004090  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800256c  0800256c  00004090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800256c  0800256c  0000356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08002574  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000090  08002604  00004090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002604  0000419c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008352  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b26  00000000  00000000  0000c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0000df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  0000e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f09  00000000  00000000  0000f0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7b5  00000000  00000000  00025fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084958  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b60c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  000b6104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b8888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002520 	.word	0x08002520

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002520 	.word	0x08002520

0800014c <AX_PS2_Init>:
  * @brief  PS2初始化
  * @param  无
  * @retval 无
  */
void AX_PS2_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

    // 使能GPIO时钟
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b1f      	ldr	r3, [pc, #124]	@ (80001e0 <AX_PS2_Init+0x94>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1e      	ldr	r2, [pc, #120]	@ (80001e0 <AX_PS2_Init+0x94>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1c      	ldr	r3, [pc, #112]	@ (80001e0 <AX_PS2_Init+0x94>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]

    // DATA引脚配置 - 输入上拉
    GPIO_InitStruct.Pin = DI_PIN;
 8000178:	2310      	movs	r3, #16
 800017a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800017c:	2300      	movs	r3, #0
 800017e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000180:	2301      	movs	r3, #1
 8000182:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DI_PORT, &GPIO_InitStruct);
 8000184:	f107 0308 	add.w	r3, r7, #8
 8000188:	4619      	mov	r1, r3
 800018a:	4816      	ldr	r0, [pc, #88]	@ (80001e4 <AX_PS2_Init+0x98>)
 800018c:	f000 ff8c 	bl	80010a8 <HAL_GPIO_Init>

    // COMMAND引脚配置 - 推挽输出
    GPIO_InitStruct.Pin = CMD_PIN;
 8000190:	2320      	movs	r3, #32
 8000192:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000194:	2301      	movs	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000198:	2300      	movs	r3, #0
 800019a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800019c:	2303      	movs	r3, #3
 800019e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CMD_PORT, &GPIO_InitStruct);
 80001a0:	f107 0308 	add.w	r3, r7, #8
 80001a4:	4619      	mov	r1, r3
 80001a6:	480f      	ldr	r0, [pc, #60]	@ (80001e4 <AX_PS2_Init+0x98>)
 80001a8:	f000 ff7e 	bl	80010a8 <HAL_GPIO_Init>

    // CS引脚配置 - 推挽输出
    GPIO_InitStruct.Pin = CS_PIN;
 80001ac:	2340      	movs	r3, #64	@ 0x40
 80001ae:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(CS_PORT, &GPIO_InitStruct);
 80001b0:	f107 0308 	add.w	r3, r7, #8
 80001b4:	4619      	mov	r1, r3
 80001b6:	480b      	ldr	r0, [pc, #44]	@ (80001e4 <AX_PS2_Init+0x98>)
 80001b8:	f000 ff76 	bl	80010a8 <HAL_GPIO_Init>

    // CLK引脚配置 - 推挽输出
    GPIO_InitStruct.Pin = CLK_PIN;
 80001bc:	2380      	movs	r3, #128	@ 0x80
 80001be:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(CLK_PORT, &GPIO_InitStruct);
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	4619      	mov	r1, r3
 80001c6:	4807      	ldr	r0, [pc, #28]	@ (80001e4 <AX_PS2_Init+0x98>)
 80001c8:	f000 ff6e 	bl	80010a8 <HAL_GPIO_Init>

    // 关闭PS2手柄使能
    CS_H();
 80001cc:	2201      	movs	r2, #1
 80001ce:	2140      	movs	r1, #64	@ 0x40
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <AX_PS2_Init+0x98>)
 80001d2:	f001 f904 	bl	80013de <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010800 	.word	0x40010800

080001e8 <PS2_ReadWriteData>:
  * @brief  PS2数据读写函数
  * @param  cmd: 要写入的命令
  * @retval 读出的数据
  */
static uint8_t PS2_ReadWriteData(uint8_t cmd)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	73fb      	strb	r3, [r7, #15]
    uint8_t ref;

    // 写入命令，并读取一个1字节数据
    for(ref = 0x01; ref > 0x00; ref <<= 1)
 80001f6:	2301      	movs	r3, #1
 80001f8:	73bb      	strb	r3, [r7, #14]
 80001fa:	e02e      	b.n	800025a <PS2_ReadWriteData+0x72>
    {
        // 输出一位数据
        if(ref & cmd)
 80001fc:	7bba      	ldrb	r2, [r7, #14]
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4013      	ands	r3, r2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d005      	beq.n	8000214 <PS2_ReadWriteData+0x2c>
            CMD_H();
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4817      	ldr	r0, [pc, #92]	@ (800026c <PS2_ReadWriteData+0x84>)
 800020e:	f001 f8e6 	bl	80013de <HAL_GPIO_WritePin>
 8000212:	e004      	b.n	800021e <PS2_ReadWriteData+0x36>
        else
            CMD_L();
 8000214:	2200      	movs	r2, #0
 8000216:	2120      	movs	r1, #32
 8000218:	4814      	ldr	r0, [pc, #80]	@ (800026c <PS2_ReadWriteData+0x84>)
 800021a:	f001 f8e0 	bl	80013de <HAL_GPIO_WritePin>

        CLK_L();
 800021e:	2200      	movs	r2, #0
 8000220:	2180      	movs	r1, #128	@ 0x80
 8000222:	4812      	ldr	r0, [pc, #72]	@ (800026c <PS2_ReadWriteData+0x84>)
 8000224:	f001 f8db 	bl	80013de <HAL_GPIO_WritePin>
//        HAL_Delay(1); // 微秒级延时可能需要使用定时器实现，此处是使用了毫秒级延时
        delay_us(16);
 8000228:	2010      	movs	r0, #16
 800022a:	f000 f86d 	bl	8000308 <delay_us>

        // 读取一位数据
        if(DI())
 800022e:	2110      	movs	r1, #16
 8000230:	480e      	ldr	r0, [pc, #56]	@ (800026c <PS2_ReadWriteData+0x84>)
 8000232:	f001 f8bd 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <PS2_ReadWriteData+0x5c>
            res |= ref;
 800023c:	7bfa      	ldrb	r2, [r7, #15]
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	4313      	orrs	r3, r2
 8000242:	73fb      	strb	r3, [r7, #15]

        CLK_H();
 8000244:	2201      	movs	r2, #1
 8000246:	2180      	movs	r1, #128	@ 0x80
 8000248:	4808      	ldr	r0, [pc, #32]	@ (800026c <PS2_ReadWriteData+0x84>)
 800024a:	f001 f8c8 	bl	80013de <HAL_GPIO_WritePin>
//        HAL_Delay(1); // 微秒级延时可能需要使用定时器实现，此处是使用了毫秒级延时
        delay_us(16);
 800024e:	2010      	movs	r0, #16
 8000250:	f000 f85a 	bl	8000308 <delay_us>
    for(ref = 0x01; ref > 0x00; ref <<= 1)
 8000254:	7bbb      	ldrb	r3, [r7, #14]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	73bb      	strb	r3, [r7, #14]
 800025a:	7bbb      	ldrb	r3, [r7, #14]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1cd      	bne.n	80001fc <PS2_ReadWriteData+0x14>
    }

    return res;
 8000260:	7bfb      	ldrb	r3, [r7, #15]
}
 8000262:	4618      	mov	r0, r3
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010800 	.word	0x40010800

08000270 <AX_PS2_ScanKey>:
  * @brief  PS2获取按键及摇杆数值
  * @param  *JoystickStruct 手柄键值结构体
  * @retval 无
  */
void AX_PS2_ScanKey(JOYSTICK_TypeDef *JoystickStruct)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    uint8_t i;

    // 使能手柄
    CS_L();
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	@ 0x40
 800027c:	481f      	ldr	r0, [pc, #124]	@ (80002fc <AX_PS2_ScanKey+0x8c>)
 800027e:	f001 f8ae 	bl	80013de <HAL_GPIO_WritePin>

    // 读取PS2数据
    for(i = 0; i < 9; i++)
 8000282:	2300      	movs	r3, #0
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e00d      	b.n	80002a4 <AX_PS2_ScanKey+0x34>
    {
        PS2_data[i] = PS2_ReadWriteData(PS2_cmnd[i]);
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	4a1d      	ldr	r2, [pc, #116]	@ (8000300 <AX_PS2_ScanKey+0x90>)
 800028c:	5cd3      	ldrb	r3, [r2, r3]
 800028e:	7bfc      	ldrb	r4, [r7, #15]
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ffa9 	bl	80001e8 <PS2_ReadWriteData>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 800029c:	551a      	strb	r2, [r3, r4]
    for(i = 0; i < 9; i++)
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3301      	adds	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	2b08      	cmp	r3, #8
 80002a8:	d9ee      	bls.n	8000288 <AX_PS2_ScanKey+0x18>
    }

    // 关闭使能
    CS_H();
 80002aa:	2201      	movs	r2, #1
 80002ac:	2140      	movs	r1, #64	@ 0x40
 80002ae:	4813      	ldr	r0, [pc, #76]	@ (80002fc <AX_PS2_ScanKey+0x8c>)
 80002b0:	f001 f895 	bl	80013de <HAL_GPIO_WritePin>

    // 数值传递
    JoystickStruct->mode = PS2_data[1];
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002b6:	785a      	ldrb	r2, [r3, #1]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	701a      	strb	r2, [r3, #0]
    JoystickStruct->btn1 = ~PS2_data[3];
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002be:	78db      	ldrb	r3, [r3, #3]
 80002c0:	43db      	mvns	r3, r3
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	705a      	strb	r2, [r3, #1]
    JoystickStruct->btn2 = ~PS2_data[4];
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	43db      	mvns	r3, r3
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	709a      	strb	r2, [r3, #2]
    JoystickStruct->RJoy_LR = PS2_data[5];
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002d6:	795a      	ldrb	r2, [r3, #5]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	70da      	strb	r2, [r3, #3]
    JoystickStruct->RJoy_UD = PS2_data[6];
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002de:	799a      	ldrb	r2, [r3, #6]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	711a      	strb	r2, [r3, #4]
    JoystickStruct->LJoy_LR = PS2_data[7];
 80002e4:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002e6:	79da      	ldrb	r2, [r3, #7]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	715a      	strb	r2, [r3, #5]
    JoystickStruct->LJoy_UD = PS2_data[8];
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <AX_PS2_ScanKey+0x94>)
 80002ee:	7a1a      	ldrb	r2, [r3, #8]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	719a      	strb	r2, [r3, #6]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd90      	pop	{r4, r7, pc}
 80002fc:	40010800 	.word	0x40010800
 8000300:	08002538 	.word	0x08002538
 8000304:	200000ac 	.word	0x200000ac

08000308 <delay_us>:
  * @uint32_t  udelay: 要延时的微秒数
  * @retval 无
  */

void delay_us(uint32_t udelay)    //定义hal库us级延迟
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8000310:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <delay_us+0x78>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 8000316:	f000 fdb5 	bl	8000e84 <HAL_GetTick>
 800031a:	6138      	str	r0, [r7, #16]
  //sysc = 72000;  //SystemCoreClock / (1000U / uwTickFreq);
  delays =udelay * 72; //sysc / 1000 * udelay;
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4613      	mov	r3, r2
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	4413      	add	r3, r2
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	429a      	cmp	r2, r3
 800032e:	d913      	bls.n	8000358 <delay_us+0x50>
    {
      while(HAL_GetTick() == tickn)
 8000330:	bf00      	nop
 8000332:	f000 fda7 	bl	8000e84 <HAL_GetTick>
 8000336:	4602      	mov	r2, r0
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	4293      	cmp	r3, r2
 800033c:	d0f9      	beq.n	8000332 <delay_us+0x2a>
        {

        }
      wait = 72000000 + startval - delays;
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	1ad2      	subs	r2, r2, r3
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <delay_us+0x7c>)
 8000346:	4413      	add	r3, r2
 8000348:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 800034a:	bf00      	nop
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <delay_us+0x78>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	429a      	cmp	r2, r3
 8000354:	d3fa      	bcc.n	800034c <delay_us+0x44>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {

        }
    }
}
 8000356:	e00f      	b.n	8000378 <delay_us+0x70>
      wait = startval - delays;
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 8000360:	bf00      	nop
 8000362:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <delay_us+0x78>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	429a      	cmp	r2, r3
 800036a:	d205      	bcs.n	8000378 <delay_us+0x70>
 800036c:	f000 fd8a 	bl	8000e84 <HAL_GetTick>
 8000370:	4602      	mov	r2, r0
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	4293      	cmp	r3, r2
 8000376:	d0f4      	beq.n	8000362 <delay_us+0x5a>
}
 8000378:	bf00      	nop
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	e000e010 	.word	0xe000e010
 8000384:	044aa200 	.word	0x044aa200

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b33      	ldr	r3, [pc, #204]	@ (800046c <MX_GPIO_Init+0xe4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a32      	ldr	r2, [pc, #200]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b30      	ldr	r3, [pc, #192]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b4:	4b2d      	ldr	r3, [pc, #180]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a2c      	ldr	r2, [pc, #176]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b2a      	ldr	r3, [pc, #168]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b27      	ldr	r3, [pc, #156]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a26      	ldr	r2, [pc, #152]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b24      	ldr	r3, [pc, #144]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b21      	ldr	r3, [pc, #132]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a20      	ldr	r2, [pc, #128]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <MX_GPIO_Init+0xe4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000402:	481b      	ldr	r0, [pc, #108]	@ (8000470 <MX_GPIO_Init+0xe8>)
 8000404:	f000 ffeb 	bl	80013de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMD_Pin|CS_Pin|CLK_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	21e0      	movs	r1, #224	@ 0xe0
 800040c:	4819      	ldr	r0, [pc, #100]	@ (8000474 <MX_GPIO_Init+0xec>)
 800040e:	f000 ffe6 	bl	80013de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2302      	movs	r3, #2
 8000422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	4811      	ldr	r0, [pc, #68]	@ (8000470 <MX_GPIO_Init+0xe8>)
 800042c:	f000 fe3c 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_Pin */
  GPIO_InitStruct.Pin = DAT_Pin;
 8000430:	2310      	movs	r3, #16
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAT_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	480c      	ldr	r0, [pc, #48]	@ (8000474 <MX_GPIO_Init+0xec>)
 8000444:	f000 fe30 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CMD_Pin CS_Pin CLK_Pin */
  GPIO_InitStruct.Pin = CMD_Pin|CS_Pin|CLK_Pin;
 8000448:	23e0      	movs	r3, #224	@ 0xe0
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_GPIO_Init+0xec>)
 8000460:	f000 fe22 	bl	80010a8 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40011000 	.word	0x40011000
 8000474:	40010800 	.word	0x40010800

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fca9 	bl	8000dd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  AX_PS2_Init();
 8000482:	f7ff fe63 	bl	800014c <AX_PS2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f831 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f7ff ff7d 	bl	8000388 <MX_GPIO_Init>
  MX_TIM4_Init();
 800048e:	f000 fb49 	bl	8000b24 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000492:	f000 facd 	bl	8000a30 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000496:	f000 fa3b 	bl	8000910 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MotorControl_Init();
 800049a:	f000 f873 	bl	8000584 <MotorControl_Init>
  int compare_init_1 = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  int compare_init_2 = 2700;
 80004a2:	f640 238c 	movw	r3, #2700	@ 0xa8c
 80004a6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ae:	480d      	ldr	r0, [pc, #52]	@ (80004e4 <main+0x6c>)
 80004b0:	f000 ff95 	bl	80013de <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AX_PS2_ScanKey(&ps2);
 80004b4:	480c      	ldr	r0, [pc, #48]	@ (80004e8 <main+0x70>)
 80004b6:	f7ff fedb 	bl	8000270 <AX_PS2_ScanKey>

	         // 获取移动方向
	         int index = GetMoveDirection(&ps2);
 80004ba:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <main+0x70>)
 80004bc:	f000 f8b8 	bl	8000630 <GetMoveDirection>
 80004c0:	6078      	str	r0, [r7, #4]

	         // 根据方向控制电机
	         if(index == -1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c8:	d102      	bne.n	80004d0 <main+0x58>
	         {
	             StopAllMotors();
 80004ca:	f000 f993 	bl	80007f4 <StopAllMotors>
 80004ce:	e004      	b.n	80004da <main+0x62>
	         }
	         else
	         {
	             SetMotorSpeed(index, compare_init_2, compare_init_1);
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	68b9      	ldr	r1, [r7, #8]
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f957 	bl	8000788 <SetMotorSpeed>
	         }

	 HAL_Delay(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f000 fcdc 	bl	8000e98 <HAL_Delay>
  {
 80004e0:	e7e8      	b.n	80004b4 <main+0x3c>
 80004e2:	bf00      	nop
 80004e4:	40011000 	.word	0x40011000
 80004e8:	200000b8 	.word	0x200000b8

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b090      	sub	sp, #64	@ 0x40
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0318 	add.w	r3, r7, #24
 80004f6:	2228      	movs	r2, #40	@ 0x28
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 ffe3 	bl	80024c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050e:	2301      	movs	r3, #1
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	2302      	movs	r3, #2
 8000522:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800052a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800052e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f000 ff6b 	bl	8001410 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000540:	f000 f819 	bl	8000576 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	2302      	movs	r3, #2
 800054a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2102      	movs	r1, #2
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f9d8 	bl	8001914 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800056a:	f000 f804 	bl	8000576 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3740      	adds	r7, #64	@ 0x40
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057a:	b672      	cpsid	i
}
 800057c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057e:	bf00      	nop
 8000580:	e7fd      	b.n	800057e <Error_Handler+0x8>
	...

08000584 <MotorControl_Init>:
 * @brief  电机控制初始化
 * @param  None
 * @retval None
 */
void MotorControl_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000588:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <MotorControl_Init+0xa4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <MotorControl_Init+0xa4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <MotorControl_Init+0xa4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	63da      	str	r2, [r3, #60]	@ 0x3c
	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <MotorControl_Init+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	641a      	str	r2, [r3, #64]	@ 0x40
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80005a8:	4b20      	ldr	r3, [pc, #128]	@ (800062c <MotorControl_Init+0xa8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MotorControl_Init+0xa8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80005b8:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <MotorControl_Init+0xa8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	63da      	str	r2, [r3, #60]	@ 0x3c
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80005c0:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <MotorControl_Init+0xa8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2200      	movs	r2, #0
 80005c6:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(50);
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f000 fc65 	bl	8000e98 <HAL_Delay>

    // ========== 第二步：立即停止所有电机 ==========
    StopAllMotors();
 80005ce:	f000 f911 	bl	80007f4 <StopAllMotors>

    HAL_Delay(50);
 80005d2:	2032      	movs	r0, #50	@ 0x32
 80005d4:	f000 fc60 	bl	8000e98 <HAL_Delay>

    // ========== 第三步：启动PWM ==========
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005d8:	2100      	movs	r1, #0
 80005da:	4813      	ldr	r0, [pc, #76]	@ (8000628 <MotorControl_Init+0xa4>)
 80005dc:	f001 fb46 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4811      	ldr	r0, [pc, #68]	@ (8000628 <MotorControl_Init+0xa4>)
 80005e4:	f001 fb42 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005e8:	2108      	movs	r1, #8
 80005ea:	480f      	ldr	r0, [pc, #60]	@ (8000628 <MotorControl_Init+0xa4>)
 80005ec:	f001 fb3e 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005f0:	210c      	movs	r1, #12
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <MotorControl_Init+0xa4>)
 80005f4:	f001 fb3a 	bl	8001c6c <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	480c      	ldr	r0, [pc, #48]	@ (800062c <MotorControl_Init+0xa8>)
 80005fc:	f001 fb36 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	480a      	ldr	r0, [pc, #40]	@ (800062c <MotorControl_Init+0xa8>)
 8000604:	f001 fb32 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000608:	2108      	movs	r1, #8
 800060a:	4808      	ldr	r0, [pc, #32]	@ (800062c <MotorControl_Init+0xa8>)
 800060c:	f001 fb2e 	bl	8001c6c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <MotorControl_Init+0xa8>)
 8000614:	f001 fb2a 	bl	8001c6c <HAL_TIM_PWM_Start>

    HAL_Delay(50);
 8000618:	2032      	movs	r0, #50	@ 0x32
 800061a:	f000 fc3d 	bl	8000e98 <HAL_Delay>

    // ========== 第四步：再次确保停止 ==========
    StopAllMotors();
 800061e:	f000 f8e9 	bl	80007f4 <StopAllMotors>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000150 	.word	0x20000150
 800062c:	20000108 	.word	0x20000108

08000630 <GetMoveDirection>:
 * @brief  获取移动方向索引
 * @param  ps2_data: PS2手柄数据指针
 * @retval 方向索引 (-1表示停止)
 */
int GetMoveDirection(JOYSTICK_TypeDef *ps2_data)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    // 检查模式，如果是模式2则停止
    if(ps2_data->mode == 65 || ps2_data==NULL)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b41      	cmp	r3, #65	@ 0x41
 800063e:	d002      	beq.n	8000646 <GetMoveDirection+0x16>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d102      	bne.n	800064c <GetMoveDirection+0x1c>
    {
        return MOVE_STOP;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e029      	b.n	80006a0 <GetMoveDirection+0x70>
    }

    // 判断方向
    if(ps2_data->LJoy_UD == 0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <GetMoveDirection+0x28>
    {
        return MOVE_FORWARD;
 8000654:	2300      	movs	r3, #0
 8000656:	e023      	b.n	80006a0 <GetMoveDirection+0x70>
    }
    else if(ps2_data->LJoy_UD == 255)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	799b      	ldrb	r3, [r3, #6]
 800065c:	2bff      	cmp	r3, #255	@ 0xff
 800065e:	d101      	bne.n	8000664 <GetMoveDirection+0x34>
    {
        return MOVE_BACKWARD;
 8000660:	2301      	movs	r3, #1
 8000662:	e01d      	b.n	80006a0 <GetMoveDirection+0x70>
    }
    else if(ps2_data->LJoy_LR == 0)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <GetMoveDirection+0x40>
    {
        return MOVE_LEFT;
 800066c:	2302      	movs	r3, #2
 800066e:	e017      	b.n	80006a0 <GetMoveDirection+0x70>
    }
    else if(ps2_data->LJoy_LR == 255)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	2bff      	cmp	r3, #255	@ 0xff
 8000676:	d101      	bne.n	800067c <GetMoveDirection+0x4c>
    {
        return MOVE_RIGHT;
 8000678:	2303      	movs	r3, #3
 800067a:	e011      	b.n	80006a0 <GetMoveDirection+0x70>
    }
    else if(ps2_data->btn2 == dir[3])
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	789a      	ldrb	r2, [r3, #2]
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <GetMoveDirection+0x7c>)
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	429a      	cmp	r2, r3
 8000686:	d101      	bne.n	800068c <GetMoveDirection+0x5c>
    {
    	return ROTATE_LEFT;
 8000688:	2304      	movs	r3, #4
 800068a:	e009      	b.n	80006a0 <GetMoveDirection+0x70>
    }
    else if(ps2_data->btn2 == dir[1])
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	789a      	ldrb	r2, [r3, #2]
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <GetMoveDirection+0x7c>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	429a      	cmp	r2, r3
 8000696:	d101      	bne.n	800069c <GetMoveDirection+0x6c>
    {
    	return ROTATE_RIGHT;
 8000698:	2305      	movs	r3, #5
 800069a:	e001      	b.n	80006a0 <GetMoveDirection+0x70>
    }

    return MOVE_STOP;
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000

080006b0 <SetSingleMotor>:
 * @param  compare1: PWM比较值1
 * @param  compare2: PWM比较值2
 * @retval None
 */
void SetSingleMotor(MotorID_t motor_id, int compare1, int compare2)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	73fb      	strb	r3, [r7, #15]
    if(motor_id >= MOTOR_COUNT)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d856      	bhi.n	8000772 <SetSingleMotor+0xc2>
    {
        return;  // 参数检查
    }

    TIM_HandleTypeDef *timer = motor_timer_map[motor_id];
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4a2d      	ldr	r2, [pc, #180]	@ (800077c <SetSingleMotor+0xcc>)
 80006c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006cc:	617b      	str	r3, [r7, #20]
    uint8_t ch_offset = motor_channel_offset[motor_id];
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000780 <SetSingleMotor+0xd0>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	74fb      	strb	r3, [r7, #19]

    __HAL_TIM_SET_COMPARE(timer, tim_channel[ch_offset], compare1);
 80006d6:	7cfb      	ldrb	r3, [r7, #19]
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <SetSingleMotor+0xd4>)
 80006da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d104      	bne.n	80006ec <SetSingleMotor+0x3c>
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	e019      	b.n	8000720 <SetSingleMotor+0x70>
 80006ec:	7cfb      	ldrb	r3, [r7, #19]
 80006ee:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <SetSingleMotor+0xd4>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d104      	bne.n	8000702 <SetSingleMotor+0x52>
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8000700:	e00e      	b.n	8000720 <SetSingleMotor+0x70>
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SetSingleMotor+0xd4>)
 8000706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070a:	2b08      	cmp	r3, #8
 800070c:	d104      	bne.n	8000718 <SetSingleMotor+0x68>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000716:	e003      	b.n	8000720 <SetSingleMotor+0x70>
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(timer, tim_channel[ch_offset + 1], compare2);
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	3301      	adds	r3, #1
 8000724:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <SetSingleMotor+0xd4>)
 8000726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <SetSingleMotor+0x88>
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
 8000736:	e01d      	b.n	8000774 <SetSingleMotor+0xc4>
 8000738:	7cfb      	ldrb	r3, [r7, #19]
 800073a:	3301      	adds	r3, #1
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SetSingleMotor+0xd4>)
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d104      	bne.n	8000750 <SetSingleMotor+0xa0>
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6393      	str	r3, [r2, #56]	@ 0x38
 800074e:	e011      	b.n	8000774 <SetSingleMotor+0xc4>
 8000750:	7cfb      	ldrb	r3, [r7, #19]
 8000752:	3301      	adds	r3, #1
 8000754:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <SetSingleMotor+0xd4>)
 8000756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d104      	bne.n	8000768 <SetSingleMotor+0xb8>
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000766:	e005      	b.n	8000774 <SetSingleMotor+0xc4>
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	e000      	b.n	8000774 <SetSingleMotor+0xc4>
        return;  // 参数检查
 8000772:	bf00      	nop
}
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000074 	.word	0x20000074
 8000780:	08002544 	.word	0x08002544
 8000784:	20000064 	.word	0x20000064

08000788 <SetMotorSpeed>:
 * @param  compare_init_1: PWM比较值1
 * @param  compare_init_2: PWM比较值2
 * @retval None
 */
void SetMotorSpeed(int direction_index, int compare_init_1, int compare_init_2)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
    // 参数检查
    if(direction_index < 0 || direction_index >= 6)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db26      	blt.n	80007e8 <SetMotorSpeed+0x60>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b05      	cmp	r3, #5
 800079e:	dc23      	bgt.n	80007e8 <SetMotorSpeed+0x60>
    {
        return;
    }

    // 遍历所有电机
    for(MotorID_t motor_id = MOTOR_1; motor_id < MOTOR_COUNT; motor_id++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	77fb      	strb	r3, [r7, #31]
 80007a4:	e01c      	b.n	80007e0 <SetMotorSpeed+0x58>
    {
        int compare1 = compare_init_1;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	61bb      	str	r3, [r7, #24]
        int compare2 = compare_init_2;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	617b      	str	r3, [r7, #20]

        // 根据方向信号调整PWM占空比（反向电机）
        if(move_signal[direction_index][motor_id] == -1)
 80007ae:	7ffb      	ldrb	r3, [r7, #31]
 80007b0:	490f      	ldr	r1, [pc, #60]	@ (80007f0 <SetMotorSpeed+0x68>)
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d105      	bne.n	80007ce <SetMotorSpeed+0x46>
        {
            int temp = compare1;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	613b      	str	r3, [r7, #16]
            compare1 = compare2;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	61bb      	str	r3, [r7, #24]
            compare2 = temp;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	617b      	str	r3, [r7, #20]
        }

        // 设置电机PWM
        SetSingleMotor(motor_id, compare1, compare2);
 80007ce:	7ffb      	ldrb	r3, [r7, #31]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	69b9      	ldr	r1, [r7, #24]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff6b 	bl	80006b0 <SetSingleMotor>
    for(MotorID_t motor_id = MOTOR_1; motor_id < MOTOR_COUNT; motor_id++)
 80007da:	7ffb      	ldrb	r3, [r7, #31]
 80007dc:	3301      	adds	r3, #1
 80007de:	77fb      	strb	r3, [r7, #31]
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d9df      	bls.n	80007a6 <SetMotorSpeed+0x1e>
 80007e6:	e000      	b.n	80007ea <SetMotorSpeed+0x62>
        return;
 80007e8:	bf00      	nop
    }
}
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000004 	.word	0x20000004

080007f4 <StopAllMotors>:
 * @brief  停止所有电机
 * @param  None
 * @retval None
 */
void StopAllMotors(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
    // 清零所有TIM4通道
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <StopAllMotors+0x4c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <StopAllMotors+0x4c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000808:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <StopAllMotors+0x4c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <StopAllMotors+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	641a      	str	r2, [r3, #64]	@ 0x40

    // 清零所有TIM2通道
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <StopAllMotors+0x50>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <StopAllMotors+0x50>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <StopAllMotors+0x50>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <StopAllMotors+0x50>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000150 	.word	0x20000150
 8000844:	20000108 	.word	0x20000108

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_MspInit+0x5c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_MspInit+0x5c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087e:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <HAL_MspInit+0x60>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <HAL_MspInit+0x60>)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010000 	.word	0x40010000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <MemManage_Handler+0x4>

080008c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 fab0 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	@ 0x48
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2220      	movs	r2, #32
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fdc3 	bl	80024c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000942:	4a3a      	ldr	r2, [pc, #232]	@ (8000a2c <MX_TIM1_Init+0x11c>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <MX_TIM1_Init+0x118>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <MX_TIM1_Init+0x118>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000960:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096c:	482e      	ldr	r0, [pc, #184]	@ (8000a28 <MX_TIM1_Init+0x118>)
 800096e:	f001 f92d 	bl	8001bcc <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000978:	f7ff fdfd 	bl	8000576 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000984:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000988:	4619      	mov	r1, r3
 800098a:	4827      	ldr	r0, [pc, #156]	@ (8000a28 <MX_TIM1_Init+0x118>)
 800098c:	f001 fcec 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000996:	f7ff fdee 	bl	8000576 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	@ 0x60
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <MX_TIM1_Init+0x118>)
 80009c0:	f001 f9f6 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009ca:	f7ff fdd4 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	2204      	movs	r2, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <MX_TIM1_Init+0x118>)
 80009d8:	f001 f9ea 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009e2:	f7ff fdc8 	bl	8000576 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000a0a:	f001 fd0b 	bl	8002424 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a14:	f7ff fdaf 	bl	8000576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <MX_TIM1_Init+0x118>)
 8000a1a:	f000 f941 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3748      	adds	r7, #72	@ 0x48
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000c0 	.word	0x200000c0
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b33      	ldr	r3, [pc, #204]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000a66:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a68:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a7a:	4829      	ldr	r0, [pc, #164]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a7c:	f001 f8a6 	bl	8001bcc <HAL_TIM_PWM_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a86:	f7ff fd76 	bl	8000576 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4619      	mov	r1, r3
 8000a98:	4821      	ldr	r0, [pc, #132]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000a9a:	f001 fc65 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000aa4:	f7ff fd67 	bl	8000576 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000ac0:	f001 f976 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000aca:	f7ff fd54 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000ad6:	f001 f96b 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ae0:	f7ff fd49 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000aec:	f001 f960 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000af6:	f7ff fd3e 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	220c      	movs	r2, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000b02:	f001 f955 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000b0c:	f7ff fd33 	bl	8000576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <MX_TIM2_Init+0xf0>)
 8000b12:	f000 f8c5 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000108 	.word	0x20000108

08000b24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b46:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b48:	4a32      	ldr	r2, [pc, #200]	@ (8000c14 <MX_TIM4_Init+0xf0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b6c:	4828      	ldr	r0, [pc, #160]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b6e:	f001 f82d 	bl	8001bcc <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b78:	f7ff fcfd 	bl	8000576 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4821      	ldr	r0, [pc, #132]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000b8c:	f001 fbec 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b96:	f7ff fcee 	bl	8000576 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	2360      	movs	r3, #96	@ 0x60
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000bb2:	f001 f8fd 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000bbc:	f7ff fcdb 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000bc8:	f001 f8f2 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000bd2:	f7ff fcd0 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2208      	movs	r2, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000bde:	f001 f8e7 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000be8:	f7ff fcc5 	bl	8000576 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	220c      	movs	r2, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000bf4:	f001 f8dc 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000bfe:	f7ff fcba 	bl	8000576 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM4_Init+0xec>)
 8000c04:	f000 f84c 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000150 	.word	0x20000150
 8000c14:	40000800 	.word	0x40000800

08000c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d10c      	bne.n	8000c44 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c42:	e022      	b.n	8000c8a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
}
 8000c66:	e010      	b.n	8000c8a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <HAL_TIM_PWM_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10b      	bne.n	8000c8a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_TIM_PWM_MspInit+0x80>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40012c00 	.word	0x40012c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a2e      	ldr	r2, [pc, #184]	@ (8000d74 <HAL_TIM_MspPostInit+0xd4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d119      	bne.n	8000cf4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Servo_2_Pin|Servo_1_Pin;
 8000cd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4823      	ldr	r0, [pc, #140]	@ (8000d7c <HAL_TIM_MspPostInit+0xdc>)
 8000cee:	f000 f9db 	bl	80010a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000cf2:	e03b      	b.n	8000d6c <HAL_TIM_MspPostInit+0xcc>
  else if(timHandle->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cfc:	d118      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|B_IN3_Pin|B_IN4_Pin;
 8000d16:	230f      	movs	r3, #15
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4814      	ldr	r0, [pc, #80]	@ (8000d7c <HAL_TIM_MspPostInit+0xdc>)
 8000d2a:	f000 f9bd 	bl	80010a8 <HAL_GPIO_Init>
}
 8000d2e:	e01d      	b.n	8000d6c <HAL_TIM_MspPostInit+0xcc>
  else if(timHandle->Instance==TIM4)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <HAL_TIM_MspPostInit+0xe0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d118      	bne.n	8000d6c <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_TIM_MspPostInit+0xd8>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = F_IN1_Pin|F_IN2_Pin|F_IN3_Pin|F_IN4_Pin;
 8000d52:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <HAL_TIM_MspPostInit+0xe4>)
 8000d68:	f000 f99e 	bl	80010a8 <HAL_GPIO_Init>
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40000800 	.word	0x40000800
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fdbc 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	@ (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f001 fb91 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff fb5f 	bl	8000478 <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dc4:	08002574 	.word	0x08002574
  ldr r2, =_sbss
 8000dc8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dcc:	2000019c 	.word	0x2000019c

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f92b 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fd2a 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f935 	bl	800108e <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f90b 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000084 	.word	0x20000084
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	20000088 	.word	0x20000088

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	2000008c 	.word	0x2000008c
 8000e80:	20000198 	.word	0x20000198

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000198 	.word	0x20000198

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff fff0 	bl	8000e84 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffe0 	bl	8000e84 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000008c 	.word	0x2000008c

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff90 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff49 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5f 	bl	8000f44 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb0 	bl	8000ffc <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b08b      	sub	sp, #44	@ 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e169      	b.n	8001390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010bc:	2201      	movs	r2, #1
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8158 	bne.w	800138a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4a9a      	ldr	r2, [pc, #616]	@ (8001348 <HAL_GPIO_Init+0x2a0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d05e      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010e4:	4a98      	ldr	r2, [pc, #608]	@ (8001348 <HAL_GPIO_Init+0x2a0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d875      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010ea:	4a98      	ldr	r2, [pc, #608]	@ (800134c <HAL_GPIO_Init+0x2a4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d058      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010f0:	4a96      	ldr	r2, [pc, #600]	@ (800134c <HAL_GPIO_Init+0x2a4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d86f      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010f6:	4a96      	ldr	r2, [pc, #600]	@ (8001350 <HAL_GPIO_Init+0x2a8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d052      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010fc:	4a94      	ldr	r2, [pc, #592]	@ (8001350 <HAL_GPIO_Init+0x2a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d869      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001102:	4a94      	ldr	r2, [pc, #592]	@ (8001354 <HAL_GPIO_Init+0x2ac>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04c      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001108:	4a92      	ldr	r2, [pc, #584]	@ (8001354 <HAL_GPIO_Init+0x2ac>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d863      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800110e:	4a92      	ldr	r2, [pc, #584]	@ (8001358 <HAL_GPIO_Init+0x2b0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d046      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001114:	4a90      	ldr	r2, [pc, #576]	@ (8001358 <HAL_GPIO_Init+0x2b0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d85d      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800111a:	2b12      	cmp	r3, #18
 800111c:	d82a      	bhi.n	8001174 <HAL_GPIO_Init+0xcc>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d859      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001122:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <HAL_GPIO_Init+0x80>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	080011a3 	.word	0x080011a3
 800112c:	0800117d 	.word	0x0800117d
 8001130:	0800118f 	.word	0x0800118f
 8001134:	080011d1 	.word	0x080011d1
 8001138:	080011d7 	.word	0x080011d7
 800113c:	080011d7 	.word	0x080011d7
 8001140:	080011d7 	.word	0x080011d7
 8001144:	080011d7 	.word	0x080011d7
 8001148:	080011d7 	.word	0x080011d7
 800114c:	080011d7 	.word	0x080011d7
 8001150:	080011d7 	.word	0x080011d7
 8001154:	080011d7 	.word	0x080011d7
 8001158:	080011d7 	.word	0x080011d7
 800115c:	080011d7 	.word	0x080011d7
 8001160:	080011d7 	.word	0x080011d7
 8001164:	080011d7 	.word	0x080011d7
 8001168:	080011d7 	.word	0x080011d7
 800116c:	08001185 	.word	0x08001185
 8001170:	08001199 	.word	0x08001199
 8001174:	4a79      	ldr	r2, [pc, #484]	@ (800135c <HAL_GPIO_Init+0x2b4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117a:	e02c      	b.n	80011d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e029      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	3304      	adds	r3, #4
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e024      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	3308      	adds	r3, #8
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e01f      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	330c      	adds	r3, #12
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e01a      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011aa:	2304      	movs	r3, #4
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e013      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	611a      	str	r2, [r3, #16]
          break;
 80011c2:	e009      	b.n	80011d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	615a      	str	r2, [r3, #20]
          break;
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          break;
 80011d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	d801      	bhi.n	80011e2 <HAL_GPIO_Init+0x13a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_Init+0x13e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3304      	adds	r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	@ 0xff
 80011ec:	d802      	bhi.n	80011f4 <HAL_GPIO_Init+0x14c>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x152>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	3b08      	subs	r3, #8
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	210f      	movs	r1, #15
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	6a39      	ldr	r1, [r7, #32]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80b1 	beq.w	800138a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001228:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <HAL_GPIO_Init+0x2b8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_GPIO_Init+0x2b8>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <HAL_GPIO_Init+0x2b8>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001240:	4a48      	ldr	r2, [pc, #288]	@ (8001364 <HAL_GPIO_Init+0x2bc>)
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a40      	ldr	r2, [pc, #256]	@ (8001368 <HAL_GPIO_Init+0x2c0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_GPIO_Init+0x1ec>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3f      	ldr	r2, [pc, #252]	@ (800136c <HAL_GPIO_Init+0x2c4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d00d      	beq.n	8001290 <HAL_GPIO_Init+0x1e8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3e      	ldr	r2, [pc, #248]	@ (8001370 <HAL_GPIO_Init+0x2c8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d007      	beq.n	800128c <HAL_GPIO_Init+0x1e4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <HAL_GPIO_Init+0x2cc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d101      	bne.n	8001288 <HAL_GPIO_Init+0x1e0>
 8001284:	2303      	movs	r3, #3
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001288:	2304      	movs	r3, #4
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001294:	2300      	movs	r3, #0
 8001296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012a6:	492f      	ldr	r1, [pc, #188]	@ (8001364 <HAL_GPIO_Init+0x2bc>)
 80012a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	492c      	ldr	r1, [pc, #176]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	608b      	str	r3, [r1, #8]
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4928      	ldr	r1, [pc, #160]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012d8:	4013      	ands	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e8:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	4922      	ldr	r1, [pc, #136]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60cb      	str	r3, [r1, #12]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	491e      	ldr	r1, [pc, #120]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 8001300:	4013      	ands	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4918      	ldr	r1, [pc, #96]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4914      	ldr	r1, [pc, #80]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d021      	beq.n	800137c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	490e      	ldr	r1, [pc, #56]	@ (8001378 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e021      	b.n	800138a <HAL_GPIO_Init+0x2e2>
 8001346:	bf00      	nop
 8001348:	10320000 	.word	0x10320000
 800134c:	10310000 	.word	0x10310000
 8001350:	10220000 	.word	0x10220000
 8001354:	10210000 	.word	0x10210000
 8001358:	10120000 	.word	0x10120000
 800135c:	10110000 	.word	0x10110000
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000
 8001368:	40010800 	.word	0x40010800
 800136c:	40010c00 	.word	0x40010c00
 8001370:	40011000 	.word	0x40011000
 8001374:	40011400 	.word	0x40011400
 8001378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	43db      	mvns	r3, r3
 8001384:	4909      	ldr	r1, [pc, #36]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001386:	4013      	ands	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	3301      	adds	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f ae8e 	bne.w	80010bc <HAL_GPIO_Init+0x14>
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	372c      	adds	r7, #44	@ 0x2c
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ee:	787b      	ldrb	r3, [r7, #1]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	611a      	str	r2, [r3, #16]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e272      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001430:	4b92      	ldr	r3, [pc, #584]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00c      	beq.n	8001456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143c:	4b8f      	ldr	r3, [pc, #572]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
 8001448:	4b8c      	ldr	r3, [pc, #560]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b89      	ldr	r3, [pc, #548]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d06c      	beq.n	800153c <HAL_RCC_OscConfig+0x12c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d168      	bne.n	800153c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e24c      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x76>
 8001478:	4b80      	ldr	r3, [pc, #512]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7f      	ldr	r2, [pc, #508]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02e      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x98>
 800148e:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7a      	ldr	r2, [pc, #488]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b78      	ldr	r3, [pc, #480]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a77      	ldr	r2, [pc, #476]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0xbc>
 80014b2:	4b72      	ldr	r3, [pc, #456]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a71      	ldr	r2, [pc, #452]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6f      	ldr	r3, [pc, #444]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014cc:	4b6b      	ldr	r3, [pc, #428]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a67      	ldr	r2, [pc, #412]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcca 	bl	8000e84 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcc6 	bl	8000e84 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e200      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe4>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fcb6 	bl	8000e84 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fcb2 	bl	8000e84 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1ec      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b53      	ldr	r3, [pc, #332]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x10c>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154a:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001556:	4b49      	ldr	r3, [pc, #292]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b43      	ldr	r3, [pc, #268]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c0      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4939      	ldr	r1, [pc, #228]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc6b 	bl	8000e84 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc67 	bl	8000e84 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4927      	ldr	r1, [pc, #156]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_RCC_OscConfig+0x270>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc4a 	bl	8000e84 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc46 	bl	8000e84 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e180      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03a      	beq.n	8001694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_RCC_OscConfig+0x274>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fc2a 	bl	8000e84 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc26 	bl	8000e84 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e160      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fa9c 	bl	8001b90 <RCC_Delay>
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_RCC_OscConfig+0x274>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc10 	bl	8000e84 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001666:	e00f      	b.n	8001688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fc0c 	bl	8000e84 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d908      	bls.n	8001688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e146      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	42420000 	.word	0x42420000
 8001684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b92      	ldr	r3, [pc, #584]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e9      	bne.n	8001668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a6 	beq.w	80017ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b8b      	ldr	r3, [pc, #556]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a87      	ldr	r2, [pc, #540]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b82      	ldr	r3, [pc, #520]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b7f      	ldr	r3, [pc, #508]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7e      	ldr	r2, [pc, #504]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbcd 	bl	8000e84 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fbc9 	bl	8000e84 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	@ 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e103      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b75      	ldr	r3, [pc, #468]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x312>
 8001714:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e02d      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x334>
 800172a:	4b6a      	ldr	r3, [pc, #424]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a69      	ldr	r2, [pc, #420]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b67      	ldr	r3, [pc, #412]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a66      	ldr	r2, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	e01c      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x356>
 800174c:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a60      	ldr	r2, [pc, #384]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a5d      	ldr	r2, [pc, #372]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a5a      	ldr	r2, [pc, #360]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fb7d 	bl	8000e84 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb79 	bl	8000e84 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0b1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ee      	beq.n	800178e <HAL_RCC_OscConfig+0x37e>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb67 	bl	8000e84 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb63 	bl	8000e84 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e09b      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8087 	beq.w	8001906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f8:	4b36      	ldr	r3, [pc, #216]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d061      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d146      	bne.n	800189a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb37 	bl	8000e84 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb33 	bl	8000e84 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e06d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4921      	ldr	r1, [pc, #132]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a19      	ldr	r1, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	430b      	orrs	r3, r1
 8001866:	491b      	ldr	r1, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb07 	bl	8000e84 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb03 	bl	8000e84 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x46a>
 8001898:	e035      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff faf0 	bl	8000e84 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff faec 	bl	8000e84 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e026      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x498>
 80018c6:	e01e      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e019      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_RCC_OscConfig+0x500>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0d0      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4965      	ldr	r1, [pc, #404]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800197a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d040      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e073      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06b      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4936      	ldr	r1, [pc, #216]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa3e 	bl	8000e84 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa3a 	bl	8000e84 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e053      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d210      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4922      	ldr	r1, [pc, #136]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	@ (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f99c 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08002548 	.word	0x08002548
 8001ae0:	20000084 	.word	0x20000084
 8001ae4:	20000088 	.word	0x20000088

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x30>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	e027      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0c5b      	lsrs	r3, r3, #17
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	fb03 f202 	mul.w	r2, r3, r2
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e004      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	693b      	ldr	r3, [r7, #16]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	08002558 	.word	0x08002558
 8001b88:	08002568 	.word	0x08002568
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <RCC_Delay+0x34>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <RCC_Delay+0x38>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bac:	bf00      	nop
  }
  while (Delay --);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <RCC_Delay+0x1c>
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000084 	.word	0x20000084
 8001bc8:	10624dd3 	.word	0x10624dd3

08001bcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e041      	b.n	8001c62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff f810 	bl	8000c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f992 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_TIM_PWM_Start+0x24>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e022      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d109      	bne.n	8001caa <HAL_TIM_PWM_Start+0x3e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e015      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d109      	bne.n	8001cc4 <HAL_TIM_PWM_Start+0x58>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e008      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e05e      	b.n	8001d9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_PWM_Start+0x82>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cec:	e013      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_PWM_Start+0x92>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cfc:	e00b      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d104      	bne.n	8001d0e <HAL_TIM_PWM_Start+0xa2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d0c:	e003      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	6839      	ldr	r1, [r7, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fafe 	bl	8002320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_TIM_PWM_Start+0x138>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d107      	bne.n	8001d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <HAL_TIM_PWM_Start+0x138>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_TIM_PWM_Start+0xfa>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d009      	beq.n	8001d66 <HAL_TIM_PWM_Start+0xfa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <HAL_TIM_PWM_Start+0x13c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_TIM_PWM_Start+0xfa>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <HAL_TIM_PWM_Start+0x140>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d111      	bne.n	8001d8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d010      	beq.n	8001d9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	e007      	b.n	8001d9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800

08001db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0ae      	b.n	8001f2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	f200 809f 	bhi.w	8001f1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dde:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e19 	.word	0x08001e19
 8001de8:	08001f1d 	.word	0x08001f1d
 8001dec:	08001f1d 	.word	0x08001f1d
 8001df0:	08001f1d 	.word	0x08001f1d
 8001df4:	08001e59 	.word	0x08001e59
 8001df8:	08001f1d 	.word	0x08001f1d
 8001dfc:	08001f1d 	.word	0x08001f1d
 8001e00:	08001f1d 	.word	0x08001f1d
 8001e04:	08001e9b 	.word	0x08001e9b
 8001e08:	08001f1d 	.word	0x08001f1d
 8001e0c:	08001f1d 	.word	0x08001f1d
 8001e10:	08001f1d 	.word	0x08001f1d
 8001e14:	08001edb 	.word	0x08001edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f8f6 	bl	8002010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0208 	orr.w	r2, r2, #8
 8001e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6999      	ldr	r1, [r3, #24]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	619a      	str	r2, [r3, #24]
      break;
 8001e56:	e064      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f93c 	bl	80020dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6999      	ldr	r1, [r3, #24]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]
      break;
 8001e98:	e043      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f985 	bl	80021b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0208 	orr.w	r2, r2, #8
 8001eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0204 	bic.w	r2, r2, #4
 8001ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	61da      	str	r2, [r3, #28]
      break;
 8001ed8:	e023      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f9cf 	bl	8002284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69d9      	ldr	r1, [r3, #28]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	61da      	str	r2, [r3, #28]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a2f      	ldr	r2, [pc, #188]	@ (8002004 <TIM_Base_SetConfig+0xd0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a2c      	ldr	r2, [pc, #176]	@ (8002008 <TIM_Base_SetConfig+0xd4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x30>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <TIM_Base_SetConfig+0xd8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <TIM_Base_SetConfig+0xd0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <TIM_Base_SetConfig+0xd4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <TIM_Base_SetConfig+0xd8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <TIM_Base_SetConfig+0xd0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f023 0201 	bic.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800

08002010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f023 0201 	bic.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800203e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f023 0302 	bic.w	r3, r3, #2
 8002058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <TIM_OC1_SetConfig+0xc8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d10c      	bne.n	8002086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f023 0308 	bic.w	r3, r3, #8
 8002072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <TIM_OC1_SetConfig+0xc8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800209c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	621a      	str	r2, [r3, #32]
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00

080020dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 0210 	bic.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0320 	bic.w	r3, r3, #32
 8002126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <TIM_OC2_SetConfig+0xd0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d10d      	bne.n	8002158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <TIM_OC2_SetConfig+0xd0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d113      	bne.n	8002188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800216e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	40012c00 	.word	0x40012c00

080021b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0303 	bic.w	r3, r3, #3
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <TIM_OC3_SetConfig+0xd0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10d      	bne.n	800222a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a14      	ldr	r2, [pc, #80]	@ (8002280 <TIM_OC3_SetConfig+0xd0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d113      	bne.n	800225a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	621a      	str	r2, [r3, #32]
}
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00

08002284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	031b      	lsls	r3, r3, #12
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0f      	ldr	r2, [pc, #60]	@ (800231c <TIM_OC4_SetConfig+0x98>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d109      	bne.n	80022f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00

08002320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2201      	movs	r2, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	621a      	str	r2, [r3, #32]
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800237c:	2302      	movs	r3, #2
 800237e:	e046      	b.n	800240e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023cc:	d009      	beq.n	80023e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10c      	bne.n	80023fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800

08002424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800243c:	2302      	movs	r3, #2
 800243e:	e03d      	b.n	80024bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <memset>:
 80024c6:	4603      	mov	r3, r0
 80024c8:	4402      	add	r2, r0
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d100      	bne.n	80024d0 <memset+0xa>
 80024ce:	4770      	bx	lr
 80024d0:	f803 1b01 	strb.w	r1, [r3], #1
 80024d4:	e7f9      	b.n	80024ca <memset+0x4>
	...

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	2600      	movs	r6, #0
 80024dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002510 <__libc_init_array+0x38>)
 80024de:	4c0d      	ldr	r4, [pc, #52]	@ (8002514 <__libc_init_array+0x3c>)
 80024e0:	1b64      	subs	r4, r4, r5
 80024e2:	10a4      	asrs	r4, r4, #2
 80024e4:	42a6      	cmp	r6, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	f000 f81a 	bl	8002520 <_init>
 80024ec:	2600      	movs	r6, #0
 80024ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002518 <__libc_init_array+0x40>)
 80024f0:	4c0a      	ldr	r4, [pc, #40]	@ (800251c <__libc_init_array+0x44>)
 80024f2:	1b64      	subs	r4, r4, r5
 80024f4:	10a4      	asrs	r4, r4, #2
 80024f6:	42a6      	cmp	r6, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002500:	4798      	blx	r3
 8002502:	3601      	adds	r6, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	f855 3b04 	ldr.w	r3, [r5], #4
 800250a:	4798      	blx	r3
 800250c:	3601      	adds	r6, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	0800256c 	.word	0x0800256c
 8002514:	0800256c 	.word	0x0800256c
 8002518:	0800256c 	.word	0x0800256c
 800251c:	08002570 	.word	0x08002570

08002520 <_init>:
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	bf00      	nop
 8002524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002526:	bc08      	pop	{r3}
 8002528:	469e      	mov	lr, r3
 800252a:	4770      	bx	lr

0800252c <_fini>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr
